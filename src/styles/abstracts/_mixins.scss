/**
* @desc         mixins of the app.
* @requires     variables.scss
*/

// responsive breakpoint manager
@mixin respond-to($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(
      type-of($raw-query) == 'string',
      unquote($raw-query),
      inspect($raw-query)
    );

    @media #{$query} {
      @content;
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. '
           + 'Make sure you have passed a valid value as defined in `$breakpoints` map in variables.scss.';
  }
}

@mixin flex {
  display: flex;
  flex: 1;
  flex-wrap: nowrap;
  justify-content: center;
  align-items: center;
}

@mixin flex-spaced {
  @include flex;
  justify-content: space-between;
}

@mixin flex-end {
  @include flex;
  align-items: flex-end;
}

@mixin flex-start {
  @include flex;
  align-items: flex-start;
}

@mixin flex-spaced-start {
  @include flex;
  justify-content: space-between;
  align-items: flex-start;
}

@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

@mixin clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after { clear: both; }
}


@mixin absCenter {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// MEDIA QUERY MANAGER
/*
0 - 600px:      Phone
600 - 900px:    Tablet portrait
900 - 1200px:   Tablet landscape
[1200 - 1800] is where our normal styles apply
1800px + :      Big desktop

$breakpoint arguement choices:
- phone
- tab-port
- tab-land
- big-desktop

ORDER: Base + typography > general layout + grid > page layout > components

1em = 16px
*/
@mixin respond($breakpoint) {
  @if $breakpoint == phone {
    @media only screen and (max-width: 37.5em) {
      @content;
    } //600px
  }
  @if $breakpoint == tab-port {
    @media only screen and (max-width: 56.25em) {
      @content;
    } //900px
  }
  @if $breakpoint == tab-land {
    @media only screen and (max-width: 75em) {
      @content;
    } //1200px
  }
  @if $breakpoint == big-desktop {
    @media only screen and (min-width: 112.5em) {
      @content;
    } //1800
  }
}

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Kitty Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

@mixin guss-typography-defaults($font-family: $f-regular-text) {
  @at-root {
    html {
      font-family: $font-family;
      -moz-osx-font-smoothing: grayscale; /* 1 */
      -webkit-font-smoothing: antialiased; /* 1 */
    }
    body {
      line-height: 1.5; /* 2 */
    }
  }
}

// Shorthands for font declarations
// =============================================================================

/**
 * Font-size and line-height shorthand
 *
 * @param {Number} $size
 * @param {Number} $line-height ($size)
 *
 * @example
 *  @include font-size(18, 24);
 *
 * @requires {function} convert-to-px
 *
 * @group typography
 */
@mixin font-size($size, $line-height: $size) {
  font-size: convert-to-px($size);
  line-height: convert-to-px($line-height);
}

/**
 * Font styling shorthand
 * Note: prefer the usage of the font-scale mixins to stick to the font scale
 *
 * @param {String} $family
 * @param {String} $weight
 * @param {Number} $size
 * @param {Number} $line-height ($size)
 *
 * @example
 *  @include font(arial, bold, 18, 24);
 *
 * @requires {mixin} font-size
 *
 * @group typography
 */
@mixin font($family, $weight, $size, $line-height: $size) {
  font-family: $family;
  font-weight: $weight;
  @include font-size($size, $line-height);
}

// Font scale
// =============================================================================

// Prefixes:
// f- stands for Font: use to set a font-family only
// fs- for Font Scale

@mixin f-textBold {
  font-family: $f-bold-text;
}

@mixin fs-bold($level, $size-only: false) {
  @include font-size(
    get-font-size(textBold, $level),
    get-line-height(textBold, $level)
  );

  @if $size-only == false {
    @include f-textBold;
  }
}

@mixin f-textRegular {
  font-family: $f-regular-text;
}

@mixin fs-regular($level, $size-only: false) {
  @include font-size(
    get-font-size(textRegular, $level),
    get-line-height(textRegular, $level)
  );

  @if $size-only == false {
    @include f-textRegular;
  }
}

@mixin f-textLight {
  font-family: $f-light-text;
}

@mixin fs-light($level, $size-only: false) {
  @include font-size(
    get-font-size(textLight, $level),
    get-line-height(textLight, $level)
  );

  @if $size-only == false {
    @include f-textLight;
  }
}


@mixin button-basic {
  height: 36px;
  border-radius: 2px;
  text-align: center;
  color: $white;
  background: $primary-green;
  border: 0;
  font-weight: 400;
  padding: 0 16px;
  font-family: inherit;
  font-size: inherit;
  cursor: pointer;
  &:hover {
    background: lighten($primary-green, 10%);
  }
  &:focus {
    outline: none;
  }
  &:active {
    background: lighten($primary-green, 15%);
  }
}

@mixin flex {
  display: flex;
  flex: 1;
  flex-wrap: nowrap;
  justify-content: center;
  align-items: center;
}

@mixin flex-spaced {
  @include flex;
  justify-content: space-between;
}

@mixin flex-end {
  @include flex;
  align-items: flex-end;
}

@mixin flex-start {
  @include flex;
  align-items: flex-start;
}

@mixin flex-spaced-start {
  @include flex;
  justify-content: space-between;
  align-items: flex-start;
}

/*Classes*/
.is-display-none {
  display: none;
}
.is-display-hidden {
  visibility: hidden;
}

/* Mixins */
@mixin soft-shadow {
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.19);
}

@mixin shallow-soft-shadow {
  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.19);
}

@mixin hover-card {
  transition: all 0.5s;
  transform: translateY(-10px);
  box-shadow: 5px 0 15px 5px black;
  cursor: pointer;
}

@mixin bp($min: 0, $max: 0) {
  $type: type-of($min);

  @if $type == string {
    @if $min == xxs {
      @media (max-width: 605px) {
        @content;
      }
    }

    @if $min == xs {
      @media (max-width: 767px) {
        @content;
      } // Mobile Devices
    } @else if $min == sm {
      @media (min-width: 768px) {
        @content;
      } // Tablet Devices
    } @else if $min == md {
      @media (min-width: 992px) {
        @content;
      } // Desktops
    } @else if $min == lg {
      @media (min-width: 1200px) {
        @content;
      } // Desktops
    }
  } @else if $type == number {
    // Allow for custom parameters for min and max size
    $query: 'all' !default;
    @if $min != 0 and $max != 0 {
      $query: '(min-width: #{$min}) and (max-width: #{$max})';
    } // set both min and max
    @else if $min != 0 and $max == 0 {
      $query: '(min-width: #{$min})';
    } // set just min
    @else if $min == 0 and $max != 0 {
      $query: '(max-width: #{$max})';
    } // set just max
    @media #{$query} {
      @content;
    }
  }
}

@mixin bp($min: 0, $max: 0) {
  $type: type-of($min);

  @if $type == string {
    @if $min == xxs {
      @media (max-width: 605px) {
        @content;
      }
    }

    @if $min == xs {
      @media (max-width: 767px) {
        @content;
      } // Mobile Devices
    } @else if $min == sm {
      @media (min-width: 768px) {
        @content;
      } // Tablet Devices
    } @else if $min == md {
      @media (min-width: 992px) {
        @content;
      } // Desktops
    } @else if $min == lg {
      @media (min-width: 1200px) {
        @content;
      } // Desktops
    }
  } @else if $type == number {
    // Allow for custom parameters for min and max size
    $query: 'all' !default;
    @if $min != 0 and $max != 0 {
      $query: '(min-width: #{$min}) and (max-width: #{$max})';
    } // set both min and max
    @else if $min != 0 and $max == 0 {
      $query: '(min-width: #{$min})';
    } // set just min
    @else if $min == 0 and $max != 0 {
      $query: '(max-width: #{$max})';
    } // set just max
    @media #{$query} {
      @content;
    }
  }
}


// Mixin for generating new styles
@mixin btn-styles($btn-color, $btn-states-color) {
    background-color: $btn-color;

    &:hover,
    &:focus,
    &:active,
    &.active,
    &:active:focus,
    &:active:hover,
    &.active:focus,
    &.active:hover,
    .show > &.dropdown-toggle,
    .show > &.dropdown-toggle:focus,
    .show > &.dropdown-toggle:hover {
        background-color: $btn-states-color !important;
        color: $white-color !important;
        box-shadow: none !important;
    }

    &:not([data-action]):hover{
        box-shadow:  none;
    }

    &.disabled,
    &:disabled,
    &[disabled],
    fieldset[disabled] & {
        &,
        &:hover,
        &:focus,
        &.focus,
        &:active,
        &.active {
            background-color: $btn-color;
            border-color: $btn-color;
        }
    }

    // btn-neutral style
    @if $btn-color == $white-color{
        color: $primary-color;

        &.btn-danger{
            color: $danger-color;

            &:hover,
            &:focus,
            &:active,
            &:active:focus{
                color: $danger-states-color !important;
            }
        }

        &.btn-info{
            color: $info-color !important;

            &:hover,
            &:focus,
            &:active,
            &:active:focus{
                color: $info-states-color !important;
            }
        }

        &.btn-warning{
            color: $warning-color !important;

            &:hover,
            &:focus,
            &:active,
            &:active:focus{
                color: $warning-states-color !important;
            }
        }

        &.btn-success{
            color: $success-color !important;

            &:hover,
            &:focus,
            &:active,
            &:active:focus{
                color: $success-states-color !important;
            }
        }

        &.btn-default{
            color: $default-color !important;

            &:hover,
            &:focus,
            &:active,
            &:active:focus{
                color: $default-states-color !important;
            }
        }

        &.active,
        &:active,
        &:active:focus,
        &:active:hover,
        &.active:focus,
        &.active:hover,
        .show > &.dropdown-toggle,
        .show > &.dropdown-toggle:focus,
        .show > &.dropdown-toggle:hover {
            background-color: $white-color !important;
            color: $primary-states-color !important;
            box-shadow: none !important;
        }

        &:hover,
        &:focus{
            color: $primary-states-color !important;

            &:not(.nav-link){
                box-shadow: none;
            }

        }

    } @else {
        color: $white-color;
    }

    &.btn-simple{
        color: $btn-color;
        border-color: $btn-color;

        &:hover,
        &:focus,
        &:active{
            background-color: $transparent-bg;
            color: $btn-states-color;
            border-color: $btn-states-color;
            box-shadow: none;
        }
    }

    &.btn-link{
        color: $btn-color;

        &:hover,
        &:focus,
        &:active,
        &:active:focus {
            background-color: $transparent-bg;
            color: $btn-states-color;
            text-decoration: none;
            box-shadow: none;
        }
    }
}

@mixin btn-outline-styles($btn-color, $btn-states-color){
    background: $transparent-bg;
    border: 2px solid $btn-color !important;
    color: $btn-color;
    @include opacity(1);

    &:hover,
    &:focus,
    &:active,
    &:focus:active,
    &.active,
    .open > &.dropdown-toggle {
      background-color: $btn-color !important;
      color: $fill-font-color !important;
      border-color: $btn-color !important;
      .caret{
          border-top-color: $fill-font-color !important;
      }
    }

    .caret{
        border-top-color: $white-color !important;
    }

    &.disabled,
    &:disabled,
    &[disabled],
    fieldset[disabled] & {
      &,
      &:hover,
      &:focus,
      &.focus,
      &:active,
      &.active {
        background-color: $transparent-bg !important;
        border-color: $btn-color !important;
      }
    }
}

@mixin btn-size($padding-vertical, $padding-horizontal, $font-size, $border){
   font-size: $font-size;
   border-radius: $border;
   padding: $padding-vertical $padding-horizontal;

   &.btn-simple{
       padding: $padding-vertical - 1 $padding-horizontal - 1;
   }

}

@mixin rotate-180(){
    filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2);
    -webkit-transform: rotate(180deg);
    -ms-transform: rotate(180deg);
    transform: rotate(180deg);
}

@mixin icon-color($color) {
    box-shadow:  0px 9px 30px -6px $color;
    color: $color;
}

@mixin dropdown-colors($brand-color, $dropdown-header-color, $dropdown-color, $background-color ) {
    background-color: $brand-color;

    &:before{
        color: $brand-color;
    }

    .dropdown-header:not([href]):not([tabindex]){
        color: $dropdown-header-color;
    }

    .dropdown-item{
        color: $dropdown-color;

        &:hover,
        &:focus{
            background-color: $background-color;
        }
    }

    .dropdown-divider{
        background-color: $background-color;
    }
}


@mixin input-size($padding-vertical, $padding-horizontal){
    padding: $padding-vertical $padding-horizontal;
}

@mixin form-control-placeholder($color, $opacity){
   .form-control::-moz-placeholder{
       color: $color;
       @include opacity(1);
   }
   .form-control:-moz-placeholder{
       color: $color;
       @include opacity(1);
   }
   .form-control::-webkit-input-placeholder{
       color: $color;
       @include opacity(1);
   }
   .form-control:-ms-input-placeholder{
       color: $color;
       @include opacity(1);
   }
}

@mixin placeholder() {
  &::-moz-placeholder {@content; } // Firefox
  &:-ms-input-placeholder {@content; } // Internet Explorer 10+
  &::-webkit-input-placeholder  {@content; } // Safari and Chrome
}

@mixin light-form(){
    border-radius: 0;
    border:0;
    padding: 0;
    background-color: transparent;

}


@mixin form-control-lg-padding($padding-vertical, $padding-horizontal) {
    .form-group.no-border.form-control-lg,
    .input-group.no-border.form-control-lg{
        .input-group-append .input-group-text{
            padding: $padding-vertical 0 $padding-vertical $padding-horizontal;
        }

        .form-control{
            padding: $padding-vertical $padding-horizontal;

            & + .input-group-prepend .input-group-text,
            & + .input-group-append .input-group-text{
                padding: $padding-vertical $padding-horizontal $padding-vertical 0;
            }
        }
    }

    .form-group.form-control-lg,
    .input-group.form-control-lg{
        .form-control{
            padding: $padding-vertical - 1 $padding-horizontal - 1;

            & + .input-group-prepend .input-group-text,
            & + .input-group-append .input-group-text{
                padding: $padding-vertical - 1 $padding-horizontal - 1 $padding-vertical - 1 0;
            }
        }

        .input-group-prepend .input-group-text,
        .input-group-append .input-group-text{
            padding: $padding-vertical - 1 0 $padding-vertical $padding-horizontal - 1;

            & + .form-control{
                padding: $padding-vertical  $padding-horizontal - 1 $padding-vertical $padding-horizontal - 3;
            }
        }
    }
}



@mixin input-base-padding($padding-vertical, $padding-horizontal) {
    .form-group.no-border,
    .input-group.no-border{
        .form-control{
            padding: $padding-vertical $padding-horizontal;

            & + .input-group-prepend .input-group-text,
            & + .input-group-append .input-group-text{
                padding: $padding-vertical $padding-horizontal $padding-vertical 0;
            }
        }

        .input-group-prepend .input-group-text,
        .input-group-append .input-group-text{
            padding: $padding-vertical 0 $padding-vertical $padding-horizontal;
        }
    }

    .form-group,
    .input-group{
        .form-control{
            padding: $padding-vertical - 1 $padding-horizontal - 1 $padding-vertical - 1 $padding-horizontal - 1;

            & + .input-group-prepend .input-group-text,
            & + .input-group-append .input-group-text{
                padding: $padding-vertical - 1 $padding-horizontal - 1 $padding-vertical - 1 0;
            }
        }

        .input-group-prepend .input-group-text,
        .input-group-append .input-group-text{
            padding: $padding-vertical - 1 0 $padding-vertical - 1 $padding-horizontal - 1;

            & + .form-control,
            & ~ .form-control{
                padding:$padding-vertical - 1 $padding-horizontal $padding-vertical $padding-horizontal - 3;
            }
        }
    }
}


//color1 = $opacity-5
//color2 = $opacity-8
//color3 = $white-color
//color4 = $transparent-bg
//color5 = $opacity-1
//color6 = $opacity-2


@mixin input-coloured-bg($color1, $color2, $color3, $color4, $color5, $color6) {
    @include form-control-placeholder(darken($color2, 8%), 1);

    .form-control{
        border-color: $color1;
        color: $color2;

        &:focus{
            border-color: $color3;
            background-color: $color4;
            color: $color3;
        }
    }

    .has-success,
    .has-danger{
        &:after{
            color: $color3;
        }
    }

    .has-danger{
        .form-control{
            background-color: $color4;
        }
    }

    .input-group-prepend .input-group-text,
    .input-group-append .input-group-text{
        background-color: $color4;
        border-color: $color1;
        color: $color2;
    }

    .input-group-focus{
        .input-group-prepend .input-group-text,
        .input-group-append .input-group-text{
            background-color: $color4;
            border-color: $color3;
            color: $color3;
        }
    }

    .form-group.no-border,
    .input-group.no-border{
        .form-control{
            background-color: $color5;
            color: $color2;

            &:focus,
            &:active,
            &:active{
                background-color: $color6;
                color: $color3;
            }
        }

        .form-control + .input-group-prepend .input-group-text,
        .form-control + .input-group-append .input-group-text{
            background-color: $color5;

            &:focus,
            &:active,
            &:active{
                background-color: $color6;
                color: $color3;
            }
        }

        .form-control{
            &:focus{
                & + .input-group-prepend .input-group-text,
                & + .input-group-append .input-group-text{
                    background-color: $color6;
                    color: $color3;
                }
            }
        }

        .input-group-prepend .input-group-text,
        .input-group-append .input-group-text{
            background-color: $color5;
            border: none;
            color: $color2;
        }

        &.input-group-focus{
            .input-group-prepend .input-group-text,
            .input-group-append .input-group-text{
                background-color: $color6;
                color: $color3;
            }
        }
    }
}

@mixin transition-input-focus-color() {
    -webkit-transition: color 0.3s ease-in-out, border-color 0.3s ease-in-out, background-color 0.3s ease-in-out;
    -moz-transition: color 0.3s ease-in-out, border-color 0.3s ease-in-out, background-color 0.3s ease-in-out;
    -o-transition: color 0.3s ease-in-out, border-color 0.3s ease-in-out, background-color 0.3s ease-in-out;
    -ms-transition: color 0.3s ease-in-out, border-color 0.3s ease-in-out, background-color 0.3s ease-in-out;
    transition: color 0.3s ease-in-out, border-color 0.3s ease-in-out, background-color 0.3s ease-in-out;
}

@mixin linear-gradient($color1, $color2){
    background: $color1; /* For browsers that do not support gradients */
    background: -webkit-linear-gradient(90deg, $color1 , $color2); /* For Safari 5.1 to 6.0 */
    background: -o-linear-gradient(90deg, $color1, $color2); /* For Opera 11.1 to 12.0 */
    background: -moz-linear-gradient(90deg, $color1, $color2); /* For Firefox 3.6 to 15 */
    background: linear-gradient(0deg, $color1 , $color2); /* Standard syntax */
}

// Opacity

@mixin opacity($opacity) {
  opacity: $opacity;
  // IE8 filter
  $opacity-ie: ($opacity * 100);
  filter: #{alpha(opacity=$opacity-ie)};
}

// vendor orefixies

@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1
          box-shadow: $shadow;
}

@mixin transition($time, $type){
    -webkit-transition: all $time $type;
    -moz-transition: all $time $type;
    -o-transition: all $time $type;
    -ms-transition: all $time $type;
    transition: all $time $type;
}


@mixin sidebar-color($color){
  &:after{
    background: $color;
  }
}

@mixin bar-animation($type){
     -webkit-animation: $type 500ms linear 0s;
     -moz-animation: $type 500ms linear 0s;
     animation: $type 500ms 0s;
     -webkit-animation-fill-mode: forwards;
     -moz-animation-fill-mode: forwards;
     animation-fill-mode: forwards;
}

@mixin sidebar-active-color($font-color){
    .nav {
        li {
          &.active > a,
          &.active > a i,
          &.active > a[data-toggle="collapse"],
          &.active > a[data-toggle="collapse"] i,
          &.active > a[data-toggle="collapse"] ~ div > ul > li.active .sidebar-mini-icon,
          &.active > a[data-toggle="collapse"] ~ div > ul > li.active > a {
            color: $font-color;
            opacity: 1;
          }
        }
    }
}

@mixin transition-opacity($time, $type){
    -webkit-transition: opacity $time $type;
    -moz-transition: opacity $time $type;
    -o-transition: opacity $time $type;
    -ms-transition: opacity $time $type;
    transition: opacity $time $type;
}

@mixin transform-translate-y-dropdown($value) {
    -webkit-transform:  translate3d(-20px,$value,0) !important;
       -moz-transform: translate3d(-20px,$value,0) !important;
       -o-transform: translate3d(-20px,$value,0) !important;
       -ms-transform: translate3d(-20px,$value,0) !important;
       transform: translate3d(-20px,$value,0) !important;
}

@mixin transform-translate-x($value){
     -webkit-transform:  translate3d($value, 0, 0);
        -moz-transform: translate3d($value, 0, 0);
        -o-transform: translate3d($value, 0, 0);
        -ms-transform: translate3d($value, 0, 0);
        transform: translate3d($value, 0, 0);
}

@mixin transform-translate-y($value){
     -webkit-transform:  translate3d(0,$value,0) !important;
        -moz-transform: translate3d(0,$value,0) !important;
        -o-transform: translate3d(0,$value,0) !important;
        -ms-transform: translate3d(0,$value,0) !important;
        transform: translate3d(0,$value,0) !important;
}

@mixin transform-translate-y-fixed-plugin($value){
     -webkit-transform:  translate3d(0,$value,0) !important;
        -moz-transform: translate3d(0,$value,0) !important;
        -o-transform: translate3d(0,$value,0) !important;
        -ms-transform: translate3d(0,$value,0) !important;
        transform: translate3d(0,$value,0) !important;
}

@mixin icon-gradient($color, $bottomColor: #000){
    background: $color;
    background: -webkit-linear-gradient($color 0%, $bottomColor 80%);
    background: -o-linear-gradient($color 0%, $bottomColor 80%);
    background: -moz-linear-gradient($color 0%, $bottomColor 80%);
    background: linear-gradient($color 0%, $bottomColor 80%);
}

@mixin topbar-x-rotation(){
    @keyframes topbar-x {
      0% {top: 0px; transform: rotate(0deg); }
      45% {top: 6px; transform: rotate(145deg); }
      75% {transform: rotate(130deg); }
      100% {transform: rotate(135deg); }
    }
    @-webkit-keyframes topbar-x {
      0% {top: 0px; -webkit-transform: rotate(0deg); }
      45% {top: 6px; -webkit-transform: rotate(145deg); }
      75% {-webkit-transform: rotate(130deg); }
      100% { -webkit-transform: rotate(135deg); }
    }
    @-moz-keyframes topbar-x {
      0% {top: 0px; -moz-transform: rotate(0deg); }
      45% {top: 6px; -moz-transform: rotate(145deg); }
      75% {-moz-transform: rotate(130deg); }
      100% { -moz-transform: rotate(135deg); }
    }
}


@mixin topbar-back-rotation(){
    @keyframes topbar-back {
      0% { top: 6px; transform: rotate(135deg); }
      45% { transform: rotate(-10deg); }
      75% { transform: rotate(5deg); }
      100% { top: 0px; transform: rotate(0); }
    }

    @-webkit-keyframes topbar-back {
      0% { top: 6px; -webkit-transform: rotate(135deg); }
      45% { -webkit-transform: rotate(-10deg); }
      75% { -webkit-transform: rotate(5deg); }
      100% { top: 0px; -webkit-transform: rotate(0); }
    }

    @-moz-keyframes topbar-back {
      0% { top: 6px; -moz-transform: rotate(135deg); }
      45% { -moz-transform: rotate(-10deg); }
      75% { -moz-transform: rotate(5deg); }
      100% { top: 0px; -moz-transform: rotate(0); }
    }
}

@mixin bottombar-x-rotation(){
    @keyframes bottombar-x {
      0% {bottom: 0px; transform: rotate(0deg);}
      45% {bottom: 6px; transform: rotate(-145deg);}
      75% {transform: rotate(-130deg);}
      100% {transform: rotate(-135deg);}
    }
    @-webkit-keyframes bottombar-x {
      0% {bottom: 0px; -webkit-transform: rotate(0deg);}
      45% {bottom: 6px; -webkit-transform: rotate(-145deg);}
      75% {-webkit-transform: rotate(-130deg);}
      100% {-webkit-transform: rotate(-135deg);}
    }
    @-moz-keyframes bottombar-x {
      0% {bottom: 0px; -moz-transform: rotate(0deg);}
      45% {bottom: 6px; -moz-transform: rotate(-145deg);}
      75% {-moz-transform: rotate(-130deg);}
      100% {-moz-transform: rotate(-135deg);}
    }
}

@mixin bottombar-back-rotation{
    @keyframes bottombar-back {
      0% { bottom: 6px;transform: rotate(-135deg);}
      45% { transform: rotate(10deg);}
      75% { transform: rotate(-5deg);}
      100% { bottom: 0px;transform: rotate(0);}
    }
    @-webkit-keyframes bottombar-back {
      0% {bottom: 6px;-webkit-transform: rotate(-135deg);}
      45% {-webkit-transform: rotate(10deg);}
      75% {-webkit-transform: rotate(-5deg);}
      100% {bottom: 0px;-webkit-transform: rotate(0);}
    }
    @-moz-keyframes bottombar-back {
      0% {bottom: 6px;-moz-transform: rotate(-135deg);}
      45% {-moz-transform: rotate(10deg);}
      75% {-moz-transform: rotate(-5deg);}
      100% {bottom: 0px;-moz-transform: rotate(0);}
    }

}

@mixin sidebar-text-color($text-color){
    .nav {
      li {
        a,
        a i,
        a[data-toggle="collapse"],
        a[data-toggle="collapse"] i,
        a[data-toggle="collapse"] ~ div > ul > li .sidebar-mini-icon,
        a[data-toggle="collapse"] ~ div > ul > li > a {
          color: $text-color;
          opacity: .7;
        }

        &:hover:not(.active) > a,
        &:focus:not(.active) > a {
            opacity: 1;
        }
      }
    }

    .logo {
      .simple-text {
        color: $text-color;
      }
      &:after {
        background-color: $text-color;
        opacity: .4;
      }
    }

    .user {
      .info a span,
      .nav .sidebar-mini-icon,
      .nav .sidebar-normal {
        color: $text-color !important;
      }
      &:after {
        background-color: $text-color;
        opacity: .4;
      }
    }
}

@mixin badge-color($color) {
    border-color: $color;
    background-color: $color;
}


@mixin transform($rule) {
  -webkit-transform: $rule;
  -moz-transform: $rule;
  -ms-transform: $rule;
  -o-transform: $rule;
  transform: $rule;
}

@mixin transition($rule...) {
  -webkit-transition: $rule;
  -moz-transition: $rule;
  -ms-transition: $rule;
  -o-transition: $rule;
  transition: $rule;
}

@mixin rounded($rule) {
  -webkit-border-radius: $rule;
  -moz-border-radius: $rule;
  border-radius: $rule;
}

@mixin center {
  position: absolute;
  top: 50%;
  left: 50%;

  @include transform(translate(-50%, -50%));
}

@mixin placeholder {
  &::-webkit-input-placeholder {@content}
  &:-moz-placeholder           {@content}
  &::-moz-placeholder          {@content}
  &:-ms-input-placeholder      {@content}
}

@mixin box-shadow($rule) {
  -moz-box-shadow: $rule;
  -webkit-box-shadow: $rule;
  box-shadow: $rule;
}

@mixin bold {
  font-weight: bold;
}

$breakpoints: (
        "phone":        320px,
        "phone-wide":   480px,
        "phablet":      560px,
        "tablet-small": 640px,
        "tablet":       768px,
        "laptop":       992px,
        "tablet-wide":  1024px,
        "desktop":      1200px,
        "desktop-wide": 1440px
);

@mixin mq($width, $type: max) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == max {
      $width: $width;
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

@mixin borderRadius($radius){
  border-radius: $radius
}

@mixin boxShadow($shadow){
  box-shadow: $shadow

}

@mixin boxShadow2($inset, $shadow){
  box-shadow: $inset, $shadow

}

@mixin transition($value){
  transition: $value
}

@mixin background-opacity($color, $opacity){
  background: $color
  background: rgba($color, $opacity)
}

@mixin square($size){
 height: $size
  width: $size
}

// center multiple divs down the center
@mixin column-center() {
  display: flex;
  flex-direction: column;
  align-items: center;
}

@mixin atMobile() {
  @media screen and (max-width: $mobile) {
    @content;
  }
}

// to use
// .paragraph {
//   @include atMobile {
//     //this is the 'block' we pass into the media query.
//     //just normal CSS styles
//     text-align: center;
//     color: $grey;
//   }
// }

//Spacing Helpers
@mixin spacer() {
  padding: $spacer-medium-plus 0;
  @include atTablet() {
    padding: $spacer-medium 0;
  }
}

@mixin spacer-custom($large, $small) {
  padding: $large 0;
  @include atTablet() {
    padding: $small 0;
  }
}

//call it like this
.cta {
  @include spacer-custom(75px, 35px);
}


@mixin flex-container($direction: row, $spacing: space-between, $alignment: null) {
  display: flex;
  flex-direction: $direction;
  justify-content: $spacing;
  align-items: $alignment;
}

.input-wrapper {
  @include flex-container($direction: column, $spacing: space-around);
}

.side-by-side {
  @include flex-container();
}

@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin justify-content($justify) {
  -webkit-justify-content: $justify;
     -moz-justify-content: $justify;
      -ms-justify-content: $justify;
          justify-content: $justify;
            -ms-flex-pack: $justify;
}

// or
//Get the value for justify-content
@function getJustify($arg){
$justify: (
  'sa':space-around,
  'sb':space-between,
  'se':space-evenly,
  'c':center,
  'fs':flex-start,
  'fe':flex-end
);

@each $key,$value in $justify{
  @if($key == $arg){
    @return $value;
  }
}
}

//Get the value for align-items
@function checkAlign($arg){
$align: (
  'b':baseline,
  's':stretch,
  'c':center,
  'fs':flex-start,
  'fe':flex-end
);

@each $key,$value in $align{
  @if($key == $arg){
    @return $value;
  }
}
}

//Display flex
@mixin d-flex(){
  display: flex;
  @content
}

// Applied example
div{
  @include d-flex{
    justify-content: getJustify(c);
    align-content: getAlign(c);
  }
}

// Flexbox display
@mixin flexbox {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flexbox {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
}

@mixin inline-flex {
	display: -webkit-inline-box;
	display: -webkit-inline-flex;
	display: -moz-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
}

@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}

@mixin flex-wrap($value: nowrap) {
	// No Webkit Box fallback.
	-webkit-flex-wrap: $value;
	-moz-flex-wrap: $value;
	@if $value == nowrap {
		-ms-flex-wrap: none;
	} @else {
		-ms-flex-wrap: $value;
	}
	flex-wrap: $value;
}

@mixin flex-flow($values: (row nowrap)) {
	// No Webkit Box fallback.
	-webkit-flex-flow: $values;
	-moz-flex-flow: $values;
	-ms-flex-flow: $values;
	flex-flow: $values;
}

@mixin order($int: 0) {
	-webkit-box-ordinal-group: $int + 1;
	-webkit-order: $int;
	-moz-order: $int;
	-ms-flex-order: $int;
	order: $int;
}

@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}

@mixin flex-shrink($int: 1) {
	-webkit-flex-shrink: $int;
	-moz-flex-shrink: $int;
	-ms-flex-negative: $int;
	flex-shrink: $int;
}

@mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	-moz-flex-basis: $value;
	-ms-flex-preferred-size: $value;
	flex-basis: $value;
}

@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else if $value == space-around {
		-ms-flex-pack: distribute;
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	-moz-justify-content: $value;
	justify-content: $value;
}

@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
}

@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $value;
	-moz-align-self: $value;
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} @else if $value == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}

@mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	-webkit-align-content: $value;
	-moz-align-content: $value;
	@if $value == flex-start {
		-ms-flex-line-pack: start;
	} @else if $value == flex-end {
		-ms-flex-line-pack: end;
	} @else {
		-ms-flex-line-pack: $value;
	}
	align-content: $value;
}

// Inline flex display
@mixin inline-flex {
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

@mixin flex-direction($value: row) {
    @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
    -moz-box-direction: reverse;
    -moz-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
    -moz-box-direction: normal;
    -moz-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
    -moz-box-direction: reverse;
    -moz-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
    -moz-box-direction: normal;
    -moz-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}