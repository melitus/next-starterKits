/**
* @desc         mixins of the app.
* @requires     variables.scss
*/

// responsive breakpoint manager
@mixin respond-to($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(
      type-of($raw-query) == 'string',
      unquote($raw-query),
      inspect($raw-query)
    );

    @media #{$query} {
      @content;
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. '
           + 'Make sure you have passed a valid value as defined in `$breakpoints` map in variables.scss.';
  }
}

@mixin flex {
  display: flex;
  flex: 1;
  flex-wrap: nowrap;
  justify-content: center;
  align-items: center;
}

@mixin flex-spaced {
  @include flex;
  justify-content: space-between;
}

@mixin flex-end {
  @include flex;
  align-items: flex-end;
}

@mixin flex-start {
  @include flex;
  align-items: flex-start;
}

@mixin flex-spaced-start {
  @include flex;
  justify-content: space-between;
  align-items: flex-start;
}

@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

@mixin absCenter {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// MEDIA QUERY MANAGER
/*
0 - 600px:      Phone
600 - 900px:    Tablet portrait
900 - 1200px:   Tablet landscape
[1200 - 1800] is where our normal styles apply
1800px + :      Big desktop

$breakpoint arguement choices:
- phone
- tab-port
- tab-land
- big-desktop

ORDER: Base + typography > general layout + grid > page layout > components

1em = 16px
*/
@mixin respond($breakpoint) {
  @if $breakpoint == phone {
    @media only screen and (max-width: 37.5em) {
      @content;
    } //600px
  }
  @if $breakpoint == tab-port {
    @media only screen and (max-width: 56.25em) {
      @content;
    } //900px
  }
  @if $breakpoint == tab-land {
    @media only screen and (max-width: 75em) {
      @content;
    } //1200px
  }
  @if $breakpoint == big-desktop {
    @media only screen and (min-width: 112.5em) {
      @content;
    } //1800
  }
}

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Kitty Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

@mixin guss-typography-defaults($font-family: $f-regular-text) {
  @at-root {
    html {
      font-family: $font-family;
      -moz-osx-font-smoothing: grayscale; /* 1 */
      -webkit-font-smoothing: antialiased; /* 1 */
    }
    body {
      line-height: 1.5; /* 2 */
    }
  }
}

// Shorthands for font declarations
// =============================================================================

/**
 * Font-size and line-height shorthand
 *
 * @param {Number} $size
 * @param {Number} $line-height ($size)
 *
 * @example
 *  @include font-size(18, 24);
 *
 * @requires {function} convert-to-px
 *
 * @group typography
 */
@mixin font-size($size, $line-height: $size) {
  font-size: convert-to-px($size);
  line-height: convert-to-px($line-height);
}

/**
 * Font styling shorthand
 * Note: prefer the usage of the font-scale mixins to stick to the font scale
 *
 * @param {String} $family
 * @param {String} $weight
 * @param {Number} $size
 * @param {Number} $line-height ($size)
 *
 * @example
 *  @include font(arial, bold, 18, 24);
 *
 * @requires {mixin} font-size
 *
 * @group typography
 */
@mixin font($family, $weight, $size, $line-height: $size) {
  font-family: $family;
  font-weight: $weight;
  @include font-size($size, $line-height);
}

// Font scale
// =============================================================================

// Prefixes:
// f- stands for Font: use to set a font-family only
// fs- for Font Scale

@mixin f-textBold {
  font-family: $f-bold-text;
}

@mixin fs-bold($level, $size-only: false) {
  @include font-size(
    get-font-size(textBold, $level),
    get-line-height(textBold, $level)
  );

  @if $size-only == false {
    @include f-textBold;
  }
}

@mixin f-textRegular {
  font-family: $f-regular-text;
}

@mixin fs-regular($level, $size-only: false) {
  @include font-size(
    get-font-size(textRegular, $level),
    get-line-height(textRegular, $level)
  );

  @if $size-only == false {
    @include f-textRegular;
  }
}

@mixin f-textLight {
  font-family: $f-light-text;
}

@mixin fs-light($level, $size-only: false) {
  @include font-size(
    get-font-size(textLight, $level),
    get-line-height(textLight, $level)
  );

  @if $size-only == false {
    @include f-textLight;
  }
}
